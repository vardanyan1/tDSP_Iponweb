version: "3.7"
services:
  web:
    image: src:latest
    build:
      context: ./django
      dockerfile: Dockerfile
    expose:
      - 8000
    ports:
      - 8000:8000
    volumes:
    - ./django:/data
    - /var/run/docker.sock:/var/run/docker.sock
    environment:
      DEPLOYMENT: api
      COMPOSE_HTTP_TIMEOUT: 3600
      LC_CTYPE: en_US.UTF-8
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      DEBUG: "True"
    depends_on:
    - postgres
    - minio
    stdin_open: true
    tty: true
    env_file: .env
    restart: always
    command: >
      /bin/bash -c '
      if [ ! -f /data/categories/initiated.txt ]; then
        python3 src/manage.py migrate
        python3 src/manage.py import_categories categories/Content-Taxonomy-1.0.xlsx
        touch /data/categories/initiated.txt
      fi;
      python3 src/manage.py runserver 0.0.0.0:8000'
    networks:
      pgnet:
  postgres:
    image: postgres:alpine
    volumes:
      - pgdata:/var/lib/postgresql/data/
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      COMPOSE_HTTP_TIMEOUT: 3600
    expose:
      - 5432
    ports:
      - 5432:5432
    networks:
      pgnet:

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio_storage:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server --console-address ":9001" /data
    networks:
      pgnet:
  ui:
    build: ./ui
    depends_on:
      - web
      - postgres
      - minio
    ports:
      - "3000:3000"
    volumes:
      - ./ui:/ui

  nginx:
    build: ./nginx/
    volumes:
      - ./django/src:/data/src
      - ./nginx/sites-enabled:/etc/nginx/conf.d
      - ./nginx/passwd:/etc/nginx/passwd
    environment:
      COMPOSE_HTTP_TIMEOUT: 3600
    links:
      - web:web
      - image_server:image_server
    networks:
      pgnet:

#  image_postgres:
#    image: postgres:alpine
#    volumes:
#      - image_pgdata:/var/lib/postgresql/data/
#    env_file:
#      - .env
#    environment:
#      POSTGRES_DB: ${POSTGRES_IMAGE_SERVER_DB}
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      POSTGRES_PORT: 5433
#      COMPOSE_HTTP_TIMEOUT: 3600
#    expose:
#      - "5433"
#    ports:
#      - "5433:5433"
#    command: -p 5433
#    networks:
#      pgnet:
#  image_server: # add new service definition
#    image: image_server:latest  # replace with the image name
#    build:
#      context: ./image_server
#      dockerfile: Dockerfile
#    expose:
#      - 8001
#    ports:
#      - 8001:8001  # map the port to host
#    volumes:
#      - ./image_server:/data  # mount the application directory
#    environment:
#      DEBUG: "True"
#    depends_on:
#      - image_postgres
#    env_file: .env
#    restart: always
#    command: /bin/bash -c 'python3 src/manage.py runserver 0.0.0.0:8001'
#    networks:
#      pgnet:
volumes:
  redis:
  web:
  pgdata:
  image_pgdata:

networks:
  pgnet:

