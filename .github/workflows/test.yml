name: build

on:
  push:
    branches:
      - development
  pull_request:
    branches:
      - main
      - development

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY  }}
      DEBUG: False
    steps:
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        working-directory: django
        run: |
          python -m pip install --upgrade pip
          pip install pylint pytest pytest-cov pylint-django
          pip install pipenv
          pipenv install --system --deploy

      - name: Lint
        working-directory: django/src
        run: PYTHONPATH="." DJANGO_SETTINGS_MODULE=tdsp.settings USE_SQLITE=True pylint --load-plugins pylint_django **/*.py


  test:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DEBUG: ${{ secrets.DEBUG }}
      DJANGO_SUPERUSER_PASSWORD: ${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
      DJANGO_SUPERUSER_USERNAME: ${{ secrets.DJANGO_SUPERUSER_USERNAME }}

      POSTGRES_NAME: ${{ secrets.POSTGRES_NAME }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      PAGINATION: ${{ secrets.PAGINATION }}
      IMAGE_SERVER: ${{ secrets.IMAGE_SERVER }}

      LOCAL_HOST: ${{ secrets.LOCAL_HOST }}
      SSP_HOST: ${{ secrets.SSP_HOST }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build images
        run: docker-compose -f docker-compose.test.yml build

      - name: Create volume for src directory
        run: mkdir src_volume

      - name: Start services with volume mount
        run: docker-compose -f docker-compose.test.yml up -d

      - name: Wait for services to start
        run: docker-compose -f docker-compose.test.yml ps

      - name: Run tests and generate coverage report
        run: docker-compose -f docker-compose.test.yml up --abort-on-container-exit

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Add this line
          file: ./django/src/coverage.xml
          flags: unittests
          env_vars: DJANGO_SETTINGS_MODULE
          fail_ci_if_error: true

      - name: Stop services
        run: docker-compose -f docker-compose.test.yml down